#!/usr/bin/env bash

#   The shared options and the default value
SELFDIR=$(cd  $(dirname "$0");pwd)
VERSION=$(cat ${SELFDIR}/VERSION)
MAKE=""
TOOLSET=""

FBITS="64"
FDEBUG="d"
FJNI=""
FLIBNAME=""
FOS=""
FDYNMICSUFFIX=""
FSTATICSUFFIX=""





################################################################
#   Show detial of helps
function show_help()
{
    echo    "Usage:"
    echo    "   configuration [--x32|--x64] [--nodebug] [--jni] [--toolset=<TOOLSET-NAME>]"
    echo    "   configuration -h|--help"
    echo    ""
    echo    "Options:"
    echo    "   --x32|--x64     To tell the script to build the 32-bits or the 64-bits library."
    echo    "   --nodebug       Do we need the symbles for debug or not."
    echo    "   --jni           To tell the script to build with the JNI supported."
    echo    "   --toolset=<TOOLSET-NAME>    To special the which toolset whill be used to compile."
    echo    "                   Currently, we support: 'win.msvc', 'win.mingw', 'win.clang', 'linux.gcc', 'osx.clang'"
    echo    ""
    echo    "Examples:"
    echo    "   ./configuration"
    echo    "   ./configuration  -nodebug --jni --toolset=win.mingw"
    echo    "   ./configuration  --toolset=linux.gcc"
    echo    ""
}




################################################################
#   Setting up the default value of the options for different Operation-System
function    load_default_options()
{
    if [ "xWindows_NT" == "x${OS}" ]; then
        TOOLSET='win.msvc'
        MAKE="nmake"
        FLIBNAME='smq'
        FOS="win"
        FDYNMICSUFFIX="dll"
        FSTATICSUFFIX="lib"
        return  0
    fi


    if [ "xlinux" == "x$(uname)" ]; then
        TOOLSET='linux.gcc'
        MAKE="make"
        FLIBNAME='libsmq'
        FOS="linux"
        FDYNMICSUFFIX="so"
        FSTATICSUFFIX="a"
        return  0  
    fi


    if [ "xDarwin" == "x$(uname)" ]; then
        TOOLSET='osx.clang'
        MAKE="make"
        FLIBNAME='libsmq'
        FOS="osx"
        FDYNMICSUFFIX="dylib"
        FSTATICSUFFIX="a"
        return  0  
    fi


    echo "Unsupported os"
    return  5
}




################################################################
#   Create all of the options
#   $@  The parameters is same with the script.
function    ready_options()
{
    #   Load the default options
    load_default_options
    RESULT=$?
    if [ ${RESULT} -ne 0 ]; then
        return  ${RESULT}
    fi


    #   Enum all of the arguments and fill the shared option-vars.
    for (( i = 1; i < $#; i++ )); do
        local arg=$(eval "\$${i}")
        case "${arg}" in
            "--32")
                FBITS=32
                ;;
            "--64")
                FBITS=64
                ;;
            "--nodebug")
                FDEBUG="r"
                ;;
            "--jni")
                FJNI="jni"
                ;;
            "--toolset=.*")
                TOOLSET=$(echo ${arg} | sed 's/--toolset=\(.*\)/\1/g')
                ;;
            *)
                echo    "Unsupported options '${arg}', ignored"
                ;;
        esac
    done


    #   Check some special infos
    if [ "xjni" == "x${FJNI}" ]; then
        if [ ! -d "${JAVA_HOME}" ]; then
            echo    "--jni need the env of \${JAVA_HOME}, but we can not access \${JAVA_HOME}"
            return  6
        fi
    fi


    return  0
}




################################################################
#   To generate the make file by the special parameters and the OS
#   $@  The parameters is same with the script.
function generage_makefile()
{
    #   Build the options
    ready_options   "$@"
    RESULT=$?
    if [ ${RESULT} -ne 0 ]; then
        echo    "${RESULT}:Read options failed"
        return  ${RESULT}
    fi


    #   Replace vars in the makefile-template, and create the real makefile.
    rm  -rf ${SELFDIR}/Makefile
    dos2unix    -q   ${SELFDIR}/Makefile.${TOOLSET} >& /dev/null
    cat ${SELFDIR}/Makefile.${TOOLSET}          |   \
    sed "s|@{PROJROOT}|${SELFDIR}|g"            |   \
    sed "s|@{VERSION}|${VERSION}|g"             |   \
    sed "s|@{TOOLSET}|${TOOLSET}|g"             |   \
    sed "s|@{MAKE}|${MAKE}|g"                   |   \
    sed "s|@{FDEBUG}|${FDEBUG}|g"               |   \
    sed "s|@{FBITS}|${FBITS}|g"                 |   \
    sed "s|@{FJNI}|${FJNI}|g"                   |   \
    sed "s|@{FOS}|${FOS}|g"                     |   \
    sed "s|@{FLIBNAME}|${FLIBNAME}|g"           |   \
    sed "s|@{FDYNMICSUFFIX}|${FDYNMICSUFFIX}|g" |   \
    sed "s|@{FSTATICSUFFIX}|${FSTATICSUFFIX}|g" >   ${SELFDIR}/Makefile
    RESULT=$?
    if [ ${RESULT} -ne 0 ]; then
        echo    "${RESULT}:Generate makefile failed"
        return  ${RESULT}
    fi


    echo    "Generate make file success: ${SELFDIR}/Makefile (${SELFDIR}/Makefile.${TOOLSET})"
    return  0
}




################################################################
#   The main entry function
function main()
{
    if [ $# -gt 0 ]; then
        if [ "x-h" == "x$1" ] || [ "x--help" == "x$1" ]; then
            show_help
            return  0
        fi
    fi

    generage_makefile   "$@"
    RESULT=$?
    if  [ ${RESULT} -ne 0 ]; then
        return  2
    fi

    return  0
}




################################################################
main    "$@"
exit     $?

